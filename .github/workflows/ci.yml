name: CI

on: [push, pull_request]

env:
  CI: true
  BUILDKITE: true
  RAILS_ENV: test
  RACK_ENV: test
  MYSQL_HOST: 127.0.0.1
  MYSQL_PORT: 3306
  REDIS_HOST: redis
  REDIS_PORT: 6379
  PGHOST: 127.0.0.1
  PGUSER: postgres
  PGPORT: 5432
  BUNDLE_DEPLOYMENT: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        ruby: ["2.7", "3.0", "3.1", "3.2"]
        include:
          - ruby: head
            experimental: true
          - ruby: jruby
            experimental: true
          - ruby: jruby-head
            experimental: true
          - ruby: truffleruby
            experimental: true
          - ruby: truffleruby-head
            experimental: true
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        codename="$(. /etc/os-release; x="${VERSION_CODENAME-${VERSION#*(}}"; echo "${x%%[ )]*}")"
        if ! which gpg || ! which curl; then \
          apt-get update \
          && apt-get install -y --no-install-recommends \
              gnupg curl; \
        fi
        # Postgres apt sources
        sudo curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 sudo apt-key add -
        sudo add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt/ ${codename}-pgdg main"
        # Node apt sources
        sudo  curl -sS https://deb.nodesource.com/gpgkey/nodesource.gpg.key | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 sudo apt-key add -
        sudo add-apt-repository "deb http://deb.nodesource.com/node_18.x ${codename} main"
        # Yarn apt sources
        sudo curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 sudo apt-key add -
        sudo add-apt-repository "deb http://dl.yarnpkg.com/debian/ stable main"
        # Install dependencies
        sudo apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        bzip2 \
        dpkg-dev \
        file \
        g++ \
        gcc \
        imagemagick \
        libbz2-dev \
        libc6-dev \
        libcurl4-openssl-dev \
        libdb-dev \
        libevent-dev \
        libffi-dev \
        libgdbm-dev \
        libgeoip-dev \
        libglib2.0-dev \
        libjpeg-dev \
        libkrb5-dev \
        liblzma-dev \
        libmagickcore-dev \
        libmagickwand-dev \
        libncurses5-dev \
        libncursesw5-dev \
        libpng-dev \
        libpq-dev \
        libreadline-dev \
        libsqlite3-dev \
        libssl-dev \
        libtool \
        libvips-dev \
        libwebp-dev \
        libxml2-dev \
        libxslt-dev \
        libyaml-dev \
        make \
        patch \
        unzip \
        xz-utils \
        zlib1g-dev \
        imagemagick \
        postgresql-client-15 \
        libmysqlclient-dev \
        default-mysql-client \
        sqlite3 \
        nodejs \
        yarn \
        ffmpeg \
        mupdf \
        mupdf-tools \
        poppler-utils

    - name: Set up Memcached
      uses: niden/actions-memcached@v7

    - name: Set up Redis
      uses: supercharge/redis-github-action@1.2.0

    - name: Set up Chrome with Docker
      run: |
        docker pull selenium/standalone-chrome:latest
        docker run -d -p 4444:4444 selenium/standalone-chrome

    # For activejob integration tests
    - name: Start Beanstalkd container
      uses: docker://schickling/beanstalkd
      with:
        args: -p 11300:11300
      continue-on-error: true

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: false
      env:
        BUNDLE_DEPLOYMENT: false

    - name: Update RubyGems and Bundler
      run: |
        gem update --system
        gem install bundler
        ruby --version
        gem --version
        bundle --version

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.bundle
        key: ${{ runner.os }}-ruby-${{ matrix.ruby }}-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-ruby-${{ matrix.ruby }}-
          ${{ runner.os }}-ruby-

    - name: Install bundler dependencies
      run: bundle config unset deployment && bundle install --jobs 4 --retry 3

    - name: Set up database
      run: |
        bundle exec rake db:create db:schema:load --trace
        bundle exec rake db:seed_fu --trace

    - name: MYSQL - Grant all privileges to rails user
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -e "
          create user 'rails'@'%';
          grant all privileges on activerecord_unittest.* to rails@'%';
          grant all privileges on activerecord_unittest2.* to rails@'%';
          grant all privileges on inexistent_activerecord_unittest.* to rails@'%';
          create database activerecord_unittest default character set utf8mb4;
          create database activerecord_unittest2 default character set utf8mb4;
        "

  actioncable:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        ruby: ["2.7", "3.0", "3.1", "3.2"]
        include:
          - ruby: head
            experimental: true
          - ruby: jruby
            experimental: true
          - ruby: jruby-head
            experimental: true
          - ruby: truffleruby
            experimental: true
          - ruby: truffleruby-head
            experimental: true
    steps:
      - name: Action cable Test
        run: |
          echo "Action cable"

  actionview:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        ruby: ["2.7", "3.0", "3.1", "3.2"]
        include:
          - ruby: head
            experimental: true
          - ruby: jruby
            experimental: true
          - ruby: jruby-head
            experimental: true
          - ruby: truffleruby
            experimental: true
          - ruby: truffleruby-head
            experimental: true
    steps:
      - name: ActionView Test
        run: |
          echo "Action view"
